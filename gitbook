#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Usage:
    gitbook (fetch | make | push) <book_id> [options]
    gitbook all BOOKID BOOKIDEND [options]

Options:
    --logging (debug | info | error)
"""
import logging

from docopt import docopt

from gitenberg import Book
from gitenberg import __version__


logger = logging.getLogger('')
logging.basicConfig(filename='./log/log.txt', level=logging.INFO)

def upload_all_books(book_id_start, book_id_end):

    logging.info(
        "starting a gitbook mass upload: {0} -> {1}".format(
            book_id_start, book_id_end
        )
    )

    for book_id in xrange(int(book_id_start), int(book_id_end)):
        logging.info("--> Beginning {0}".format(book_id))
        book = Book(book_id)
        book.parse_book_metadata()
        book.all()


if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)


    if '--logging' in arguments:
        log_level = arguments['--logging']
        if log_level == 'debug':
            logger.setLevel(logging.DEBUG)
        elif log_level == 'info':
            logger.setLevel(logging.INFO)
        elif log_level == 'error':
            logger.setLevel(logging.ERROR)



    if arguments['<book_id>'] is not None:
        book = Book(arguments['<book_id>'])
        book.parse_book_metadata()

    if arguments['fetch']:
        logging.info("fetching a PG book: {0}".format(arguments['<book_id>']))
        book.fetch()

    elif arguments['make']:
        logging.info("making a local git repo for: {0}".format(arguments['<book_id>']))
        book.make()

    elif arguments['push']:
        logging.info("making a local git repo for: {0}".format(arguments['<book_id>']))
        book.push()

    elif arguments['all']:
        upload_all_books(arguments['BOOKID'], arguments['BOOKIDEND'])
